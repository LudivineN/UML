#include "../inc/Pirate.h"

Pirate::Pirate() : x(-1), y(-1), portee(0), nb_dep(1)
{
    //ctor
    nom = "Pirate";
}

Pirate::Pirate(int x, int y) : x(x), y(y), portee(0), nb_dep(1)
{
    //ctor
    nom = "Pirate";
}

Pirate::~Pirate()
{
    //dtor
}

std::string Pirate::get_nom()
{
    return nom;
}

int Pirate :: getPortee()
{
	return portee ;
}

void Pirate::show()
{
    std::cout << "nom: " << nom << std::endl;
    std::cout << "x: " << x << std::endl;
    std::cout << "y: " << y << std::endl;
    std::cout << "portee: " << portee << std::endl;
    std::cout << "nombre de deplacements: " << nb_dep << std::endl;
}

bool Pirate::deplacer()
{
    bool possible = false;
    int i = 0;
    int tmp = rand() %9 + 1;
    while (i < nb_dep || !possible)
    {
        possible = false;
    	int tmp = rand() %9 + 1;
        while (tmp == 5 && i == 1)
        {
            tmp = rand() %9 + 1;
        }
        switch (tmp)
        {
        case 1:
            possible = deplacer_bis(0, 0, 1, 1);
            break;

        case 2:
            possible = deplacer_bis(0, 0, 0, 1);
            break;

        case 3:
            possible = deplacer_bis(1, 0, 0, 1);
            break;

        case 4:
            possible = deplacer_bis(0, 0, 1, 0);
            break;

        case 6:
            possible = deplacer_bis(1, 0, 0, 0);
            break;

        case 7:
            possible = deplacer_bis(0, 1, 1, 0);
            break;

        case 8:
            possible = deplacer_bis(0, 1, 0, 0);
            break;

        case 9:
            possible = deplacer_bis(1, 1, 0, 0);
            break;

        default:
            possible = true;
            break;
        }
        if (possible) {i++;}
    }
    return possible;
}

bool Pirate::deplacer_bis(bool z, bool q, bool s, bool d)
{
    bool noError = false;
    if (z) {if (!s) {if (y + 1 < 12) {noError = true; y += 1;}}}
    if (q) {if (!d) {if (x - 1 > 0) {noError = true; x -= 1;}}}
    if (s) {if (!z) {if (y - 1 > 0) {noError = true; y -= 1;}}}
    if (d) {if (!q) {if (x + 1 < 12) {noError = true; x += 1;}}}

    return noError;
}

int Pirate::getCase_x()
{
    return x;
}

int Pirate::getCase_y()
{
    return y;
}
